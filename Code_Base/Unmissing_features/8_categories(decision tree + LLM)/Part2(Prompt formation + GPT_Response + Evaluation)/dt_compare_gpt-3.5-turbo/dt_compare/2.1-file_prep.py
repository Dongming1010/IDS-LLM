import json

def create_entry(row, prediction1, confidence1, path1, prediction2, confidence2, path2):
    """Create an entry in the desired format for GPT to determine which prediction is better."""
    return [
        {
            "role": "system",
            "content": "Your task is to evaluate 2 decision paths from two different decision trees analyzing network traffic data, each supported by a decision tree path and a stated accuracy rate. Begin your response by stating the most likely type of traffic start by 'Most likely type of traffic: ' and choose exactly from ['BenignTraffic', 'DDoS', 'Brute_Force', 'Spoofing', 'DoS', 'Recon', 'Web-Based', 'Mirai']. Then, specify 'The most plausible path is from the first tree' or 'The most plausible path is from the second tree', depending on which path from which tree you believe provides the most accurate explanation based on the path descriptions. Provide a rationale for your choice, considering the descriptions and any other relevant data provided in the paths.\nBelow are the brief definitions for each category.\nBenignTraffic: Network traffic that is legitimate and poses no threat to the network's security. Features include normal packet sizes, typical port usage, standard protocols, and expected traffic patterns.\nDDoS (Distributed Denial of Service): An attack where multiple compromised systems flood a target with traffic, overwhelming its resources and causing a denial of service. Features include high traffic volume, many sources, unusual traffic patterns, and sudden spikes in traffic.\nBrute_Force: An attack method where an attacker systematically tries all possible combinations of passwords or encryption keys to gain unauthorized access. Features include repeated login attempts, high failure rates, and access attempts from a single source or a small number of sources.\nSpoofing: An attack in which a person or program successfully masquerades as another by falsifying data to gain an illegitimate advantage. Features include mismatched IP addresses, unusual MAC addresses, and anomalies in protocol usage.\nDoS (Denial of Service): An attack that aims to make a network service unavailable to its intended users by overwhelming it with a flood of illegitimate requests. Features include a high number of requests to a single target, unusual traffic patterns, and service unavailability.\nRecon (Reconnaissance): The process of gathering information about a network to identify potential vulnerabilities before launching an attack. Features include network scanning, port scanning, and traffic probing for information gathering.\nWeb-Based: Attacks that exploit vulnerabilities in web applications, such as SQL injection, cross-site scripting, or other methods to compromise a website. Features include unusual URL requests, high POST request rates, and injection patterns in the traffic.\nMirai: A malware that infects networked devices, turning them into a botnet to conduct large-scale attacks like DDoS. Features include traffic from IoT devices, use of default credentials, scanning for vulnerable devices, and command-and-control communication patterns."
        },
        {
            "role": "user",
            "content": f"Please evaluate the following two different paths, each generated by a different decision tree, and choose the single path that makes the most sense based on the descriptions and predictions.Provide reasons for your choice:\nPath from first_tree:\nPath_Description: {path1}.\nPrediction result for above path description:{prediction1}\nPrediction confidence rate for above path description:{confidence1}\nPath from second_tree:\nPath_Description: {path2}.\nPrediction result for above path description:{prediction2}\nPrediction confidence rate for above path description:{confidence2}"
        }
    ]

input_json_path = 'dt_compare/matching_predictions.json'
output_jsonl_path = 'dt_compare/analysis_input_with_prob.jsonl'  # Notice the .jsonl extension

# Load the JSON data from the file
with open(input_json_path, 'r') as file:
    data = json.load(file)

# Open the output file in write mode
with open(output_jsonl_path, 'w') as outfile:
    for entry in data:
        json_entry = create_entry(
            row=entry['Row'],
            prediction1=entry['Prediction_1'],
            confidence1=entry['Confidence_1'],
            path1=entry['Path_1'],
            prediction2=entry['Prediction_2'],
            confidence2=entry['Confidence_2'],
            path2=entry['Path_2']
        )
        # Convert the entry to a JSON string and write it to the file with a newline
        outfile.write(json.dumps(json_entry) + '\n')

print("File prepared for analysis and saved successfully.")
